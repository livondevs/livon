WHITESPACE        = _{ " " | "\t" }
NEWLINE           = _{ "\r\n" | "\n" }
ws                = _{ WHITESPACE* }

for_stmt          = { declaration? ~ ws ~ pattern ~ ws ~ operator ~ ws ~ rhs }

declaration       = { "var" | "let" | "const" }

pattern           = { array_destructure | object_destructure | identifier }

array_destructure = { "[" ~ ws ~ identifier ~ ws ~ "," ~ ws ~ identifier ~ ws ~ "]" }
object_destructure= { "{" ~ ws ~ identifier ~ ws ~ "," ~ ws ~ identifier ~ ws ~ "}" }

identifier        = @{ (ASCII_ALPHA | "$" | "_") ~ (ASCII_ALPHANUMERIC | "$" | "_")* }

operator          = { "of" | "in" }

rhs               = { entries | expression }

entries           = _{ obj_entries | method_entries }
obj_entries       = { "Object.entries(" ~ ws ~ expression ~ ws ~ ")" }
method_entries    = { expression ~ ws ~ ".entries(" ~ ws ~ ")" }

expression        = { primary ~ (property_access | function_call)* }
primary           = { identifier | "(" ~ ws ~ expression ~ ws ~ ")" }
property_access   = { "." ~ identifier }
function_call     = { "(" ~ ws ~ argument_list? ~ ws ~ ")" }
argument_list     = { expression ~ (ws ~ "," ~ ws ~ expression)* }